#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

long countInversions( int[], int, int);
long countSplitInversions( int[], int, int, int);

int main() {

	int d; 
	cin>>d;
	
	for ( int i = 0; i < d; i++ ) {

		int n; 
		cin >> n;

		int arr[n];

		for ( int j = 0; j < n; j++ )
			cin>>arr[j];

		long result = countInversions(arr, 0, n-1);
		
		cout<< "Result" <<result << endl;
	}
		
	return 0;
}

long countInversions( int arr[], int low, int high) {

	if ( low >= high) 
		return 0;
	
	else {
	
		int middle = (low + high )/2;
		
		long result = countInversions( arr, low, middle);
		result += countInversions(arr, middle+1, high);

		result+= countSplitInversions ( arr, low, middle, high);
		return result;
	}

}

long countSplitInversions( int arr[], int low, int middle, int high) {

	int count;
	
	int i = 0;
	int leftHalf = middle - low;
	int rightHalf = high - middle; 

	int tempArray[high - low];
	int k = 0;

	while ( i <= leftHalf && i <= rightHalf ) {
		
		if ( arr[i] <= arr[middle + i + 1] )
			tempArray[k++] = arr[i++];

		else {
			tempArray[k++] = arr[middle + i + 1];
			count += middle - (i++) + 1;		
		}
	}	

	while ( i <= leftHalf )
		tempArray[k++] = arr[i++];

	while ( i <= rightHalf )
		tempArray[k++] = arr[middle - i++ + 1];

	arr = tempArray;	

	return count;
}
